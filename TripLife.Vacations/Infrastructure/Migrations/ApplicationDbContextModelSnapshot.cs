// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Vacations.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VacationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VacationId");

                    b.ToTable("Activities", (string)null);
                });

            modelBuilder.Entity("Domain.Vacations.Participation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<Guid>("VacationerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("VacationerId");

                    b.ToTable("Participations", (string)null);
                });

            modelBuilder.Entity("Domain.Vacations.Vacation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vacations", (string)null);
                });

            modelBuilder.Entity("Domain.Vacations.Vacationer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacationId");

                    b.ToTable("Vacationers", (string)null);
                });

            modelBuilder.Entity("Domain.Vacations.Activity", b =>
                {
                    b.HasOne("Domain.Vacations.Vacation", "Vacation")
                        .WithMany("Activities")
                        .HasForeignKey("VacationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Vacations.Price", "EstimatedPrice", b1 =>
                        {
                            b1.Property<Guid>("ActivityId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Amount")
                                .HasColumnType("double precision")
                                .HasColumnName("EstimatedPrice");

                            b1.HasKey("ActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityId");
                        });

                    b.OwnsOne("Domain.Vacations.Period", "Period", b1 =>
                        {
                            b1.Property<Guid>("ActivityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("StartDate");

                            b1.HasKey("ActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityId");
                        });

                    b.Navigation("EstimatedPrice");

                    b.Navigation("Period")
                        .IsRequired();

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("Domain.Vacations.Participation", b =>
                {
                    b.HasOne("Domain.Vacations.Activity", "Activity")
                        .WithMany("Participations")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Vacations.Vacationer", "Vacationer")
                        .WithMany()
                        .HasForeignKey("VacationerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Vacationer");
                });

            modelBuilder.Entity("Domain.Vacations.Vacation", b =>
                {
                    b.OwnsOne("Domain.Vacations.Price", "EstimatedBudget", b1 =>
                        {
                            b1.Property<Guid>("VacationId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Amount")
                                .HasColumnType("double precision")
                                .HasColumnName("EstimatedBudget");

                            b1.HasKey("VacationId");

                            b1.ToTable("Vacations");

                            b1.WithOwner()
                                .HasForeignKey("VacationId");
                        });

                    b.OwnsOne("Domain.Vacations.Period", "Period", b1 =>
                        {
                            b1.Property<Guid>("VacationId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("StartDate");

                            b1.HasKey("VacationId");

                            b1.ToTable("Vacations");

                            b1.WithOwner()
                                .HasForeignKey("VacationId");
                        });

                    b.Navigation("EstimatedBudget");

                    b.Navigation("Period")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Vacations.Vacationer", b =>
                {
                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Vacations.Vacation", "Vacation")
                        .WithMany("Vacationers")
                        .HasForeignKey("VacationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("Domain.Vacations.Activity", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("Domain.Vacations.Vacation", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Vacationers");
                });
#pragma warning restore 612, 618
        }
    }
}
